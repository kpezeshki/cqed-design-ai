from mcp.server.fastmcp import FastMCP
from mcp.types import TextContent, ImageContent, BlobResourceContents
import logging

# Set up logging (this just prints messages to your terminal for debugging)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create the MCP server object
mcp = FastMCP()
# ----------------------------------------------------------------------

# Hereâ€™s where you define your tools (functions the AI can use)
@mcp.tool()
def print_hello():
    return "hello"


from pysonnet.outputs import SYZParameter
import numpy as np
import os
import base64
import matplotlib.pyplot as plt

@mcp.tool()
def get_file_path():
    """
    Returns the file path of a specific .s2p file.
    This function provides the absolute path to the 'cpw.s2p' file
    located in the 'fitting' directory of the project.
    Returns:
        str: The absolute file path to 'cpw.s2p'.
    """

    file_path = '/Users/eesh/Documents/mcp_hackathon_2025/cqed-design-ai/fitting/cpw.s2p'
    return file_path

@mcp.tool()
def get_plot_folder():
    """
    Returns the file path to the folder where plots are stored.
    This function provides the absolute path to the directory
    designated for storing plot files generated by the application.
    Returns:
        str: The absolute path to the plots folder.
    """

    plot_folder = '/Users/eesh/Documents/mcp_hackathon_2025/cqed-design-ai/fitting/fitting_server/plots'
    return plot_folder

@mcp.tool()
def plot_s21(file_path, plot_folder_path=None):
    """
    Plots the S21 parameter from a Touchstone file and optionally saves the plot.
    This function reads a Touchstone file, extracts the S21 parameter (measurement at port 1 
    due to excitation at port 2), and plots its magnitude in dB as a function of frequency. 
    Optionally, the plot can be saved to a specified folder.
    Args:
        file_path (str): Path to the Touchstone file containing the S-parameter data.
        plot_folder_path (str, optional): Path to the folder where the plot will be saved. 
            If not provided, the plot will not be saved.
    Returns:
        ImageContent: An object containing the base64-encoded image of the plot, its MIME type, 
            and a description. If `plot_folder_path` is not provided, the image data will be None.
    Raises:
        FileNotFoundError: If the specified Touchstone file does not exist.
        ValueError: If the Touchstone file cannot be parsed or does not contain valid S-parameter data.
    Notes:
        - The function uses the `SYZParameter` class to parse the Touchstone file.
        - The plot is saved as "s21_plot.png" in the specified folder if `plot_folder_path` is provided.
    """
    
    

    import matplotlib.pyplot as plt

    S, freq = get_s_params(file_path)

    # Pick out S12 = measurement at port 1 due to excitation at port 2
    s12 = S[:, 0, 1]

    # Plot magnitude in dB
    fig = plt.figure()
    plt.plot(freq, 20 * np.log10(np.abs(s12)), marker='o')
    plt.xlabel('Frequency (GHz)')
    plt.ylabel('S$_{12}$ (dB)')
    plt.title('S$_{12}$ vs Frequency')
    plt.grid(True)
    # plt.show()

    image_path = save_plot_and_show(fig, plot_folder_path, title="S21 Plot")
    base64_img = image_to_base64(image_path) if image_path else None
    return ImageContent( type='image',data=base64_img, mimeType='image/png')

@mcp.tool()
def extract_total_quality_factor(file_path, plot_folder_path=None):
    """
    Extracts the total quality factor (Q) from S-parameter data and generates a plot of the S21 magnitude.
    This function reads S-parameter data from a file, identifies the resonance frequency, calculates the 
    bandwidth (Full Width at Half Maximum, FWHM), and computes the total quality factor (Q). It also 
    generates a plot of the S21 magnitude with markers for the resonance frequency and bandwidth limits.
    Args:
        file_path (str): Path to the file containing S-parameter data.
        plot_folder_path (str, optional): Path to the folder where the plot image will be saved. 
                                          If None, the plot will not be saved.
    Returns:
        tuple: A tuple containing:
            - ImageContent: An object containing the base64-encoded image of the plot and its MIME type.
            - float: The calculated total quality factor (Q).
    Raises:
        FileNotFoundError: If the specified file_path does not exist.
        ValueError: If the S-parameter data is invalid or cannot be processed.
    Notes:
        - The function assumes the S-parameter data is in a format compatible with the `get_s_params` function.
        - The resonance frequency is identified as the frequency corresponding to the minimum |S21|.
        - The bandwidth is calculated as the frequency range where the magnitude is within 3 dB of the maximum.
    Example:
        >>> image_content, quality_factor = extract_total_quality_factor("data/s_params.csv", "plots/")
        >>> print(f"Quality Factor: {quality_factor}")
    """

    S, freq = get_s_params(file_path)
    s21 = S[:, 0, 1]  # Pick out S12 = measurement at port 1 due to excitation at port 2
    # Convert frequency to Hz for fitting
    freq_hz = freq * 1e9

    # Find the resonance frequency (frequency at minimum |S21|)
    resonance_index = np.argmin(np.abs(s21))
    f_res = freq_hz[resonance_index]

    # Calculate the bandwidth (FWHM) around the resonance frequency
    magnitude = 20 * np.log10(np.abs(s21))
    half_max = np.max(magnitude) - 3  # 3 dB below the max
    indices = np.where(magnitude >= half_max)[0]
    f_min = freq_hz[indices[0]]
    f_max = freq_hz[indices[-1]]
    bandwidth = f_max - f_min

    # Calculate the total quality factor
    Q = f_res / bandwidth

    # Plot the S21 magnitude and mark the resonance frequency
    fig = plt.figure()
    plt.plot(freq_hz, magnitude, label='|S21| (dB)')
    plt.axvline(f_res, color='r', linestyle='--', label=f'Resonance: {f_res/1e9:.3f} GHz')
    plt.axvline(f_min, color='g', linestyle='--', label=f'F_min: {f_min/1e9:.3f} GHz')
    plt.axvline(f_max, color='b', linestyle='--', label=f'F_max: {f_max/1e9:.3f} GHz')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('|S21| (dB)')
    plt.title('S21 Magnitude and Resonance')
    plt.legend()
    plt.grid(True)
    
    image_path = save_plot_and_show(fig, plot_folder_path, title="S21 Plot_with_fit")
    base64_img = image_to_base64(image_path) if image_path else None
    return ImageContent( type='image',data=base64_img, mimeType='image/png'), Q
   

# ----------------------------Static-----------------------------------------
def image_to_base64(image_path):
    """
    Converts an image file to a Base64-encoded string.
    Parameters:
        image_path (str): The path to the image file.
    Returns:
        str: The Base64-encoded string representation of the image.
    """
    try:
        with open(image_path, "rb") as image_file:
            base64_string = base64.b64encode(image_file.read()).decode('utf-8')
        return base64_string
    except FileNotFoundError:
        return f"Error: File not found at {image_path}"
    except Exception as e:
        return f"Error: {str(e)}"

def get_s_params(file_path):
    """
    Reads S-parameters from a Touchstone file and returns their values and frequencies.
    Args:
        file_path (str): The path to the Touchstone file containing the S-parameters.
    Returns:
        tuple: A tuple containing:
            - sp.value: The S-parameter values.
            - sp.f: The corresponding frequencies.
    Raises:
        ValueError: If there is an error reading the S-parameters from the specified file.
    """
    
    try:
        sp = SYZParameter.from_touchstone(file_path)
        return sp.value, sp.f
    except Exception as e:
        raise ValueError(f"Error reading S-parameters from {file_path}: {str(e)}")

def save_plot_and_show(fig, plot_folder_path=None, title="Plot"):
    """
    Saves a matplotlib figure to a specified folder and optionally displays it.
    Args:
        fig (matplotlib.figure.Figure): The figure to save.
        plot_folder_path (str, optional): The path to the folder where the plot will be saved. 
            If not provided, the plot will not be saved.
        title (str, optional): The title of the plot. Defaults to "Plot".
    Returns:
        str: The path to the saved plot file if `plot_folder_path` is provided, otherwise None.
    """
    fig.suptitle(title)  # Set the title of the plot
    if plot_folder_path:
        if not os.path.exists(plot_folder_path):
            os.makedirs(plot_folder_path)
        plot_path = os.path.join(plot_folder_path, "s21_plot.png")
        fig.savefig(plot_path)
        print(f"Plot saved to {plot_path}")
        return plot_path
    else:
        # plt.show()
        return None
def convert_to_base64(image_path):
    """
    Converts an image file to a Base64-encoded string.
    Args:
        image_path (str): The path to the image file.
    Returns:
        str: The Base64-encoded string representation of the image.
    """
    try:
        with open(image_path, "rb") as image_file:
            base64_string = base64.b64encode(image_file.read()).decode('utf-8')
        return base64_string
    except FileNotFoundError:
        return f"Error: File not found at {image_path}"
    except Exception as e:
        return f"Error: {str(e)}"




# This is the main entry point for your server
def main():
    logger.info('Starting your-new-server')
    mcp.run('stdio')

if __name__ == "__main__":
    main()
